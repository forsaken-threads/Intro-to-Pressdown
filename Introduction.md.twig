## Introduction to *Pressdown*

{{ pressDown }} is an extension of Markdown Extra that adds special processing directives to handle the specific needs of documentation tasks.  Some of the directives help reduce markup, and others allow for easily escaping Twig, Markdown, and {{ pressDown }} directives.  Most of all, though, pq{ {{ pressDown }} has lots of directives to make building your documentation easy and to make it beautiful.}(left beautiful)

This document provides detailed information and samples for all available {{ pressDown }} directives.  You will see generalized versions of each directive as well as examples taken directly from the markup used to create this document.  To make these easier to understand, these directives will be processed through a syntax highlighter.  See f{ {{ pressDown }} Syntax Highlighting}(syntax) for information on how to make sense of them.

figure{
Here is the ^Figure Directive^ in an abstract version as well as in a real-world version:

{@pre-prettyprintplain.pressdown

@figure{content}(caption?)#anchor-name

@figure{
Look I can use \*Markdown\* in here

Wow! I can use @@^Pressdown^, too!
}(My caption can use \*Markdown\* and @@^Pressdown^)#anchor

pre@}

Each component of the directive will have a specific color that denotes how it is used.

table-2{
    r:
        1: {@c-pressdown {@s-pd-directive Purple s@}(-p) c@}(-p)
        2: Highlights the actual directive that lets {{ pressDown }} know how and what to parse.
    r:
        1: {@c-pressdown {@s-pd-literal Blue s@}(-p) c@}(-p)
        2: A literal character.
    r:
        1: {@c-pressdown {@s-pd-content Off-white s@}(-p) c@}(-p)
        2: Denotes content that can contain Markdown and Pressdown.
    r:
        1: {@c-pressdown {@s-pd-option Light yellow s@}(-p) c@}(-p)
        2: Identifies options for the directive.
}()#pressdown-syntax-highlighting

Note that in abstracts of a directive a `?` signifies that the preceding component is optional.  So in the above, the `caption` component is optional, meaning the parentheses can be left empty.
}({{ pressDown }} Syntax Highlighting)#syntax

### Pull Quotes

The first directive we'll take a look at is the ^Pull Quote Directive^ - @pq{content}(float? anchor?).  If you want to bring attention to an important phrase or idea on a page, you can use a pull quote to highlight it.  They are often used to pq{grab the reader and draw them in}(left) to a specific section, to prevent them from flipping past.

As you may have guessed, the component `content` should be the word or phrase you want to use.  The `float` option specifies which way the pull quote will float wherever it appears.  If not given, the default value is `right`.  The `anchor` option can be the link name of a ^Pull Quote Anchor Directive^ that indicates where in the document flow the pull quote should appear.  If it is not given, the pull quote will be anchored to wherever the original content is.

To use the ^Pull Quote Directive^, simply enter it wherever the phrase would normally occur in the flow of the document.  The phrase will appear as normal in that location but also be displayed according to the `float` and `anchor` options.  The example below shows how the pull quote on this page is created.

custom{
They are often used to @pq{grab the reader and draw them in}(left) to a specific section, to prevent them from flipping past.
}(code-block)

The pull quote on the previous page was located next to the original text.  There's a pull quote on this page that is actually from a paragraph on the next page.  Here is how this was accomplished:

custom{
@// Here it is in the document flow
But as simple as the @^Classed Block Directive^ is, @pq{ {{ pressDown }} has an even better way}(right better-way) to create figures and captions.

@// And here is how it is anchored in place
@pqa{better-way}
}(code-block)

table-2{
    h:
        1: Component
        3: Description
    c:
        2: text-center
    r:
        1: `content`
        3: This is what you want to appear, as is, within the normal flow of the document.  It may contain Markdown and Pressdown.
    r:
        1: `float`
        3: This can be ^^left^^ or ^^right^^ and indicates which direction the pull quote should float.  The default is ^^right^^ if no direction is given.
    r:
        1: `anchor`
        3:  If an anchor name is provided it may only contain these characters: ^^A-Za-z0-9_-^^.  The pull quote will be placed immediately following the rendered pull quote `content`, or, if an anchor name is provided here, it will replace the linked ^Pull Quote Anchor Directive^ in the document flow.
}(Summary of the ^Pull Quote Directive^ - @pq{content}(float? anchor?))#pqd

table-3{
    h:
        1: Component
        2: Description
    r:
        1(no-wrap): `anchor-name`
        2: The anchor name used in a ^Pull Quote Directive^ elsewhere.  The pull quote will be inserted into the document flow at the position of the directive.
}(Summary of the ^Pull Quote Anchor Directive^ - @pqa{anchor-name})#pqad


### The ^Classed Block Directive^

pqa{better-way}

One main feature is the ^Classed Block Directive^ - @{@tag-class content tag@}(options -nw)?.  This allows you to briefly create HTML blocks with a specific assigned class.  The `tag` can be replaced by a tag name or a one or two letter abbreviation that represents the following tags: {{ cbdTags }}.  The `class` can be replaced by a single class name or a series of class names separated by a dot. You can also leave it empty and no class name will be applied to the block at all.  The optional component `options` allows you to send special instructions to the Pressdown parser.  See t{}(cbd) for details.  Figure A below shows a basic example.

{@figure-
With {{ pressDown }} this is how you make an element with a specific class:

custom{
@// this
@{@s-z I need to be a span with "z" class s@}

@// becomes this
&lt;span class="z">I need to be a span with "z" class</span&gt;
}(code-block)

Then you can use `.z` in your CSS files to do something cool.
figure@}
{@fc- Figure A: The ^Classed Block Directive^ @{@tag-class? content tag@} fc@}(-p)

You can nest classed blocks and use Markdown and Pressdown within them!  (For now, you can only nest tags of different types, but nesting the same tag is under consideration as a feature.)  Let's take a look at an example. Here is the Pressdown markup we used for Figure A.  The Pressdown itself has syntax highlighting to help you better see the different components.

alert{In the example markup below, `{@{ pressDown }}` is a Twig expression for the press variable `pressDown`.  Press variables aren't covered in this book, but you can find more information about them [online](https://github.com/blazing-threads/cli-press).  For now, just know that the press variable is a shortcut that itself translates into a ^Classed Block Directive^.  That directive looks like this: @{@s-a Pressdown s@}(-p-nw).  The ^Custom Directive^ will be covered a little later.}(info-circle)

custom{
@{@f-
With {@{ pressDown }} this is how you make an element with a specific class:

@custom{
@// this:
@{@s-z I need to be a span with "z" class s@}

@// becomes this:
&lt;span class="z"&gt;I need to be a span with "z" class&lt;/span&gt;
}(code-block)

Then you can use `.z` in your CSS files to do something cool.
f@}
@{@fc- Figure A: The @^Classed Block Directive^ @{@tag-class content tag@} fc@}
}(code-block -final)

After Twig, {{ pressDown }}, and Markdown parsing, the final HTML markup looks like this:

```html
{@f-
With {{ pressDown }} this is how you make an element with a specific class:

custom{
@// this:
{@s-z I need to be a span with "z" class s@}

@// becomes this:
<span class="z">I need to be a span with "z" class</span>
}(code-block)

Then you can use `.z` in your CSS files to do something cool.
f@}
{@fc- Figure 1: The ^Classed Block Directive^ @{@tag-class content tag@} fc@}
```

table-2{
    h:
        1: Component
        2: Description
    r:
        1: `tag`
        2: The HTML tag to use for the block.  It can be either the full tag name or an abbreviation from this list: {{ cbdTags }}.
    r:
        1: `class`
        2: An optional class name to apply to the tag.  You can specify multiple classes by separating them with a dot.
    r:
        1: `content`
        2: The contents of the class can be Markdown or Pressdown.  You cannot nest another directive with the same tag.
    r:
        1: `options`
        2: This whole component is optional, i.e. you can leave off the parentheses entirely.
}(Summary of the ^Classed Block Directive^ - @{@tag-class? content tag@}(options)?)#cbd

### Figures and Captions

If you were paying attention above, you noticed that Figure A uses classed blocks of the `f(igure)` and `f(ig)c(aption)` variety.  {{ cliPress }} automatically styles figures and captions to look like insets as the one above.  But as simple as the ^Classed Block Directive^ is, pq{ {{ pressDown }} has an even better way to create figures}(right better-way) and captions.

{break}

Introducing the ^Figure Directive^ - @figure{content}(caption?)#anchor-name

Let's break down what that does, and how {{ pressDown }} helps you with it.  The `content` is what will go in the `figure` tag.  The `anchor-name` should be a unique name for the figure.  This name allows you to create a link to the figure from any file using the ^Figure Link Directive^.  Finally the `caption` is an optional caption tha will be added to the bottom of the figure, like the caption in Figure A.  And here's the best part: {{ pressDown }} will automatically number your figures for you, and prefix your caption with "Figure X:".  Don't worry about renumbering figures.  It's handled.

To see the directive in action, here's an example of how to create Figure A using the ^Figure Directive^.

custom-1{
@figure{
With {@{ pressDown }} this is how you make an element with a specific class:

@custom{
@// this:
@{@s-z I need to be a span with "z" class s@}

@// becomes this:
&lt;span class="z"&gt;I need to be a span with "z" class&lt;/span&gt;
}(code-block)

Then you can use `.z` in your CSS files to do something cool.
}(The ^Classed Block Directive^ @{@tag-class? content tag@}(options)?)#CBD
}(code-block -p2br)-1

And here's that {{ pressDown }} in action:

figure{
With {{ pressDown }} this is how you make an element with a specific class:

custom{
@// this:
@{@s-z I need to be a span with "z" class s@}

@// becomes this:
&lt;span class="z"&gt;I need to be a span with "z" class&lt;/span&gt;
}(code-block)

Then you can use `.z` in your CSS files to do something cool.
}(The ^Classed Block Directive^ @{@tag-class? content tag@}(options)?)#CBD

Now suppose you want to refer to this figure later or earlier in the document. {{ pressDown }} can create a link for you that will automatically reference the proper number of the figure, regardless of where, or in what order, it was defined. Just use the name you provided in the ^Figure Directive^ and {{ pressDown }} will handle the rest. This magic is accomplished with the ^Figure Link Directive^: @f{caption}(link) . The `link` must match the anchor name in the ^Figure Directive^. The `caption`, if defined, will be appended to the defaultof "Figure X". For example @f{Classed Block Directive}(CBD), would create a link that says "Figure 1: Classed Block Directive". If it were empty, the link would instead simply say "Figure 1".
